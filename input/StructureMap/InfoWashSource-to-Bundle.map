map "http://hsrt-kkrt.org/fhir/StructureMap/InfoWashSource-to-Bundle" = "InfoWashSourceToBundle"

// ---------- Uses: Source Logical Model + Substrukturen ----------
uses "http://hsrt-kkrt.org/fhir/StructureDefinition/InfoWashSource" alias InfoWashSource as source

// ---------- Uses: Targets ----------
uses "http://hl7.org/fhir/StructureDefinition/Bundle"       alias Bundle        as target
uses "http://hl7.org/fhir/StructureDefinition/Patient"      alias Patient       as produced
uses "http://hl7.org/fhir/StructureDefinition/Condition"    alias Condition     as produced
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" alias ServiceRequest as produced
uses "http://hl7.org/fhir/StructureDefinition/Provenance"   alias Provenance    as produced

// ---------- Hauptgruppe: Startet alles ----------
group IWS2Bundle(source src : InfoWashSource, target bundle : Bundle) {
  // Bundle-Metadaten
  src -> bundle.id = uuid() "bundleid";
  src -> bundle.type = 'transaction' "bundletype";

  // Sequenzieller Aufruf: PID -> Patient -> DG1 -> Condition -> ServiceRequest -> Provenance
  src then PIDtoPatient(src, bundle) "patient";
}

// ========================== Sequenzielle Gruppen ==========================

// ----- PID -> Patient (Startet die Sequenz) -----
group PIDtoPatient(source src : InfoWashSource, target bundle : Bundle) {
  // Patient erstellen
  src.PIDSegment as pid
    -> bundle.entry as ePat,
       ePat.resource = create('Patient') as patient,
       patient.id = uuid() as patUuid,
       ePat.fullUrl = append('urn:uuid:', patUuid) as patFull,
       ePat.request as patReq,
       patReq.method = 'POST' as patMethod,
       patReq.url = 'Patient' as patUrl
    then { 
      pid then PIDtoPatientFields(pid, patient) "patient-fields";
      // Nächste Gruppe aufrufen: DG1 -> Condition
      src then DG1toCondition(src, bundle, patient) "condition";
    } "patient-entry";
}

// ----- DG1 -> Condition (Nach Patient) -----
group DG1toCondition(source src : InfoWashSource, target bundle : Bundle, target patient : Patient) {
  // Condition erstellen
  src.DG1Segment as dg1
    -> bundle.entry as eCond,
       eCond.resource = create('Condition') as condition,
       condition.id = uuid() as condUuid,
       eCond.fullUrl = append('urn:uuid:', condUuid) as condFull,
       eCond.request as condReq,
       condReq.method = 'POST' as condMethod,
       condReq.url = 'Condition' as condUrl
    then { 
      dg1 then DG1toConditionFields(dg1, condition, patient) "condition-fields";
      // Nächste Gruppe aufrufen: ServiceRequest
      src then EncounterProcessing(src, bundle, patient, condition) "servicerequest";
    } "condition-entry";
}

// ----- Encounter Processing (Nach Condition) -----
group EncounterProcessing(source src : InfoWashSource, target bundle : Bundle, target patient : Patient, target condition : Condition) {
  // Encounter erstellen
  src.PV1Segment as pv1
    -> bundle.entry as eEnc,
       eEnc.resource = create('Encounter') as encounter,
       encounter.id = uuid() as encUuid,
       eEnc.fullUrl = append('urn:uuid:', encUuid) as encFull,
       eEnc.request as encReq,
       encReq.method = 'POST' as encMethod,
       encReq.url = 'Encounter' as encUrl
  then {
    pv1 then PV1toEncounterFields(pv1, encounter, patient, condition) "encounter-fields";
    // Nächste Gruppe aufrufen: ServiceRequest
    src then ServiceRequestProcessing(src, bundle, patient, condition, encounter) "servicerequest";
  } "encounter-entry";
}

// ----- ServiceRequest Processing (Nach Encounter) -----
group ServiceRequestProcessing(source src : InfoWashSource, target bundle : Bundle, target patient : Patient, target condition : Condition, target encounter : Encounter) {
  // ServiceRequest erstellen
  src -> bundle.entry as eSR,
       eSR.resource = create('ServiceRequest') as sr,
       sr.id = uuid() as srUuid,
       eSR.fullUrl = append('urn:uuid:', srUuid) as srFull,
       eSR.request as srReq,
       srReq.method = 'POST' as srMethod,
       srReq.url = 'ServiceRequest' as srUrl
  then {
    // ServiceRequest befüllen
    src then ServiceRequestFields(src, sr, patient, condition) "servicerequest-fields";
    // Nächste Gruppe aufrufen: Provenance
    src then ProvenanceProcessing(src, bundle, patient, condition, encounter, sr) "provenance";
  } "servicerequest-entry";
}

// ----- Provenance Processing (Letzte Gruppe) -----
group ProvenanceProcessing(source src : InfoWashSource, target bundle : Bundle, target patient : Patient, target condition : Condition, target encounter : Encounter, target sr : ServiceRequest) {
  // Provenance erstellen
  src.CTXSegment as ctx
    -> bundle.entry as eProv,
       eProv.resource = create('Provenance') as prov,
       prov.id = uuid() as provUuid,
       eProv.fullUrl = append('urn:uuid:', provUuid),
       eProv.request as provReq,
       provReq.method = 'POST' as provMethod,
       provReq.url = 'Provenance' as provUrl
  then {
    src then ProvenanceFields(src, prov, patient, condition, encounter, sr) "provenance-fields";
  } "provenance-entry";
}

// ========================== Feld-Befüllungs-Gruppen ==========================

// ----- PID -> Patient Fields -----
group PIDtoPatientFields(source pid : PIDSegment, target patient : Patient) {
  // Identifier (PID-3)
  pid -> patient.identifier = create('Identifier') as id then {
    pid.PID_3_1 as v -> id.value = v "PID_3_1";
    pid.PID_3_4_1 as sys -> id.system = sys "PID_3_4_1";
    pid.PID_3_5 as tcode
      -> id.type as t, t.coding as c, c.system as system, c.code as code then {
            pid -> code.value = translate(tcode, 'http://hl7.org/fhir/uv/v2mappings/ConceptMap/table-hl70203-to-v2-0203', 'code') "code";
            pid -> system.value = 'http://terminology.hl7.org/CodeSystem/v2-0203' "system";
         } "PID_3_5";
  } "identifier";

  // Name (PID-5)
  pid -> patient.name = create('HumanName') as nm then {
    pid.PID_5_1_1 as fam -> nm.family = fam "PID_5_1_1";
    pid.PID_5_2   as g1  -> nm.given  = g1  "PID_5_2";
    pid.PID_5_3   as g2  -> nm.given  = g2  "PID_5_3";
    pid.PID_5_4   as sfx -> nm.suffix = sfx "PID_5_4";
    pid.PID_5_6   as sfx2-> nm.suffix = sfx2 "PID_5_6";
    pid.PID_5_5   as pfx -> nm.prefix = pfx "PID_5_5";
    pid.PID_5_7   as use -> nm.use    = translate(use, 'http://hl7.org/fhir/uv/v2mappings/ConceptMap/table-hl70200-to-name-use', 'code') "PID_5_7";
  } "name";

  // Geburtsdatum (PID-7)
  pid.PID_7 as dob -> patient.birthDate = dob "PID_7";

  // Geschlecht (PID-8.1)
  pid.PID_8_1 as sex
    -> patient.gender = translate(sex, 'http://hl7.org/fhir/uv/v2mappings/ConceptMap/table-hl70001-to-administrative-gender', 'code') "PID_8_1";
}

// ----- DG1 -> Condition Fields -----
group DG1toConditionFields(source dg1 : DG1Segment, target condition : Condition, target patient : Patient) {
  // Code (DG1-3)
  dg1 -> condition.code as cc then {
    dg1 -> cc.coding as coding, coding.system as system, coding.code as code, coding.display as display, coding.version as version then {
      dg1.DG1_3_3 as vsys -> system.value   = vsys "DG1_3_3";
      dg1.DG1_3_1 as vcode -> code.value    = vcode "DG1_3_1";
      dg1.DG1_3_2 as vdisp -> display.value = vdisp "DG1_3_2";
      dg1.DG1_3_7 as vver  -> version.value = vver  "DG1_3_7";
    } "coding";
    dg1.DG1_3_9 as vtext -> cc.text as text, text.value = vtext "DG1_3_9";
  } "code";

  // Subject = Patient
  dg1 -> condition.subject = create('Reference') as ref,
        ref.reference = ('urn:uuid:' + %patient.id) "subject";
}


group PV1toEncounterFields(source pv1 : PV1Segment, target encounter : Encounter, target patient : Patient, target condition : Condition) {
  // Subject (Patient)
  pv1 -> encounter.subject = create('Reference') as ref,
        ref.reference = ('urn:uuid:' + %patient.id) "subject";

  // Diagnosis (Condition)
  pv1 -> encounter.diagnosis = create('BackboneElement') as diag then {
    pv1 -> diag.condition = create('Reference') as refCond,
           refCond.reference = ('urn:uuid:' + %condition.id) "diagnosis";
  } "diagnosis";

  // class
  pv1 -> encounter.class as cl then {
    pv1.PV1_2_1 as c1 -> cl.code = translate(c1, 'http://hl7.org/fhir/uv/v2mappings/ConceptMap/table-hl70004-to-v3-actcode', 'code') "PV1_2_1";
    pv1.PV1_2_2 as c2 -> cl.system = c2 "PV1_2_2";
    pv1.PV1_2_3 as c3 -> cl.display = c3 "PV1_2_3";
    pv1.PV1_2_7 as c7 -> cl.version = c7 "PV1_2_7";
  } "class";
  

  // status
  pv1.PV1_2_1 as s1 -> encounter.status = translate(s1, 'http://hl7.org/fhir/uv/v2mappings/ConceptMap/table-hl70004-to-encounter-status', 'code') "status";

  // type
  pv1 -> encounter.type = create('CodeableConcept') as type then {
    pv1.PV1_4_1 as c -> type.coding = create('Coding') as cd then {
      pv1 -> cd.code = translate(c, 'http://hl7.org/fhir/uv/v2mappings/ConceptMap/table-hl70007-to-v2-0007', 'code') "PV1_4_1";
      pv1.PV1_4_2 as d -> cd.display = d "PV1_4_2";
      pv1.PV1_4_3 as s -> cd.system = s "PV1_4_3";
      pv1.PV1_4_7 as v -> cd.version = v "PV1_4_7";
    };
    pv1.PV1_4_9 as txt -> type.text = txt "PV1_4_9";
  } "type";

  // serviceType
  pv1 -> encounter.serviceType = create('CodeableConcept') as st then {
    pv1.PV1_10_1 as c -> st.coding = create('Coding') as cd then {
      pv1 -> cd.code = translate(c, 'http://hl7.org/fhir/uv/v2mappings/ConceptMap/table-hl70069-to-service-type', 'code') "PV1_10_1";
      pv1.PV1_10_2 as d -> cd.display = d "PV1_10_2";
      pv1.PV1_10_3 as s -> cd.system = s "PV1_10_3";
      pv1.PV1_10_7 as v -> cd.version = v "PV1_10_7";
    };
    pv1.PV1_10_9 as txt -> st.text = txt "PV1_10_9";
  } "serviceType";

  // identifier
  pv1 -> encounter.identifier = create('Identifier') as id then {
    pv1.PV1_19_1 as vn -> id.value = vn "PV1_19_1";
    pv1.PV1_19_4_1 as sys -> id.system = sys "PV1_19_4_1";
    pv1.PV1_19_5 as tcode -> id.type = create('CodeableConcept') as type then {
      pv1 -> type.coding = create('Coding') as cd then {
        pv1 -> cd.code = translate(tcode, 'http://hl7.org/fhir/uv/v2mappings/ConceptMap/table-hl70203-to-v2-0203', 'code') "translate";
        pv1 -> cd.system = 'http://terminology.hl7.org/CodeSystem/v2-0203' "CodeSystem";
      } "coding";
      pv1 -> type.text = 'visit number' "visitnumber";
    } "CodeableConcept";
  } "identifier";

  // period
  pv1 -> encounter.period = create('Period') as per then {
    pv1.PV1_44 as start -> per.start = start "PV1_44";
    pv1.PV1_45 as end -> per.end = end "PV1_45";
  } "period";
}



// ----- ServiceRequest Fields -----
group ServiceRequestFields(source src : InfoWashSource, target sr : ServiceRequest, target patient : Patient, target condition : Condition) {
  // Subject = Patient
  src -> sr.subject = create('Reference') as refSubj,
       refSubj.reference = ('urn:uuid:' + %patient.id) "refSubj";

  // Reason = Condition
  src -> sr.reasonReference = create('Reference') as refReason,
       refReason.reference = ('urn:uuid:' + %condition.id) "refReason";

  // Encounter = Encounter
  src -> sr.encounter = create('Reference') as refEnc,
      refEnc.reference = ('urn:uuid:' + %encounter.id) "refEncounter";

  // Untergruppen laufen nur, wenn das jeweilige Segment existiert
  src.ORCSegment as orc then ORCtoServiceRequest(orc, sr) "orc";
  src.OBRSegment as obr then OBRtoServiceRequest(obr, sr) "obr";
  src.TQ1Segment as tq1 then TQ1toServiceRequest(tq1, sr) "tq1";
}

// ----- Provenance Fields -----
group ProvenanceFields(source src : InfoWashSource, target prov : Provenance, target patient : Patient, target condition : Condition, target encounter : Encounter, target sr : ServiceRequest) {
  // Target = All resources (Patient, Condition, ServiceRequest)
  src.CTXSegment as ctx -> prov.target = create('Reference') as ref1,
        ref1.reference = ('urn:uuid:' + %patient.id) "targetPatient";
  
  src.CTXSegment as ctx -> prov.target = create('Reference') as ref2,
        ref2.reference = ('urn:uuid:' + %condition.id) "targetCondition";
  
  src.CTXSegment as ctx -> prov.target = create('Reference') as ref3,
        ref3.reference = ('urn:uuid:' + %sr.id) "targetServiceRequest";

  src.CTXSegment as ctx -> prov.target = create('Reference') as ref4,
      ref4.reference = ('urn:uuid:' + %encounter.id) "targetEncounter";
      

  // Agent with device ID
  src.CTXSegment as ctx -> prov.agent as ag then {
    ctx.CTX_DEVICE_id as dev -> ag.who = create('Reference') as ref, ref.identifier = create('Identifier') as id, id.value = dev "deviceId";
  } "agentWithDevice";

  // Entity with raw message and role
  src.CTXSegment as ctx -> prov.entity as ent then {
    ctx.CTX_RAW_message as raw -> ent.what = create('Reference') as wref, wref.display = raw "rawMessage";
    ctx.CTX_role as role -> ent.role = role "role";
  } "entityWithRawMessage";

  // Recorded timestamp - use ORC_9
  src.ORCSegment as orc then {
    orc.ORC_9 as dt -> prov.recorded = dt "ORC_9";
  } "orc-timestamp";

}

// ========================== Segment-spezifische Gruppen ==========================

// ----- ORC -> ServiceRequest (Intent/Status/AuthoredOn) -----
group ORCtoServiceRequest(source orc : ORCSegment, target sr : ServiceRequest) {
  // Intent immer "order" (gemäß Vorgabe)
  orc -> sr.intent = 'order' "intent-order";

  // Status
  //orc.ORC_5 as st -> sr.status = st "ORC_5";
  orc -> sr.status = 'draft' "status-order";

  // AuthoredOn nur wenn ORC_1 == "NW"
  orc.ORC_9 as dt where (%orc.ORC_1 = 'NW') -> sr.authoredOn = dt "ORC_9_when_ORC_1_NW";
}

// ----- OBR -> ServiceRequest (Codes, Reason, Priority) -----
group OBRtoServiceRequest(source obr : OBRSegment, target sr : ServiceRequest) {
  // ServiceRequest.code (OBR-4)
  obr -> sr.code as cc then {
    obr -> cc.coding as coding, coding.code as code, coding.display as display, coding.system as system, coding.version as version then {
      obr.OBR_4_1 as v1 -> code.value    = v1 "OBR_4_1";
      obr.OBR_4_2 as v2 -> display.value = v2 "OBR_4_2";
      obr.OBR_4_3 as v3 -> system.value  = v3 "OBR_4_3";
      obr.OBR_4_7 as v7 -> version.value = v7 "OBR_4_7";
    } "coding";
    obr.OBR_4_9 as v9 -> cc.text as text, text.value = v9 "OBR_4_9";
  } "code";

  // Priority (OBR-5.1)
  obr.OBR_5_1 as pr -> sr.priority as p then {
    obr -> p.value = translate(pr, "http://hsrt-kkrt.org/fhir/ConceptMap/table-hl70485-to-request-priority", "code") "code";
  } "OBR_5_1";

  // reasonCode (OBR-31)
  obr -> sr.reasonCode as rc then {
    obr -> rc.coding as coding, coding.code as code, coding.display as display, coding.system as system, coding.version as version then {
      obr.OBR_31_1 as r1 -> code.value    = r1 "OBR_31_1";
      obr.OBR_31_2 as r2 -> display.value = r2 "OBR_31_2";
      obr.OBR_31_3 as r3 -> system.value  = r3 "OBR_31_3";
      obr.OBR_31_7 as r7 -> version.value = r7 "OBR_31_7";
    } "coding";
    obr.OBR_31_9 as r9 -> rc.text as rtext, rtext.value = r9 "OBR_31_9";
  } "reasonCode";
}

// ----- TQ1 -> ServiceRequest (Occurrence boundsPeriod) -----
group TQ1toServiceRequest(source tq1 : TQ1Segment, target sr : ServiceRequest) {
  tq1 -> sr.occurrencePeriod as op then {
  tq1.TQ1_7 as TQ1_7 -> op.start = TQ1_7;
  tq1.TQ1_8 as TQ1_8 -> op.end = TQ1_8;
  } "timing";
}