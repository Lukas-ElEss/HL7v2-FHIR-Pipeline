map "http://hsrt-kkrt.org/fhir/StructureMap/PID-to-Patient" = "PIDtoPatient"

uses "http://hsrt-kkrt.org/fhir/StructureDefinition/PIDSegment" alias PIDSegment as source
uses "http://hl7.org/fhir/StructureDefinition/Patient"         alias Patient     as target

// Optional: Wenn dein Server die Map nicht kennt, kannst du sie inline definieren.
// conceptmap "cm-hl70001-to-adm-gender" { ... }  // weggelassen, wenn serverseitig vorhanden

group PIDtoPatient(source pid : PIDSegment, target patient : Patient) {

  // Identifier (PID-3)
  pid -> patient.identifier = create('Identifier') as id then {
    // Wert
    pid.PID_3_1 as v -> id.value = v "PID_3_1";

    // System aus Assigning Authority (CX.4 = HD)
    // Bevorzugt: Universal ID (PID_3_4_2) + Type ISO (PID_3_4_3)
    pid.PID_3_4_2 as uid, pid.PID_3_4_3 as utype where (utype = 'ISO') -> id.system = append('urn:oid:', uid) "PID_3_4_ISO";

    // Fallback: Nur Namespace ID (PID_3_4_1) vorhanden → wahlweise lokaler Namespace als URI
    pid.PID_3_4_1 as ns where pid.PID_3_4_2.exists().not() -> id.assigner as asg then {
      ns -> asg.display "fallback";
    } "PID_3_4_1_fallback";

    // Identifier.type = MR (Medical Record Number)
    pid -> id.type as t, t.coding as c then {
      c.system = 'http://terminology.hl7.org/CodeSystem/v2-0203';
      c.code   = 'MR';
    } "identifierTypeMR";
  } "identifier";

  // Name (PID-5)
  pid -> patient.name = create('HumanName') as nm then {
    pid.PID_5_1_1 as fam -> nm.family = fam "PID_5_1_1";
    pid.PID_5_2   as giv -> nm.given = giv "PID_5_2";
  } "name";

  // Geburtsdatum (PID-7)
  pid.PID_7 as dob -> patient.birthDate = dob "PID_7";

  // Geschlecht (PID-8.1) → ConceptMap muss erreichbar sein
  pid.PID_8_1 as sex -> patient.gender = translate(
    sex,
    'http://hl7.org/fhir/uv/v2mappings/ConceptMap/table-hl70001-to-administrative-gender',
    'code'
  ) "PID_8_1";
}
