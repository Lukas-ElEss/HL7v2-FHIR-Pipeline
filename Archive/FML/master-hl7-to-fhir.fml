map "http://hsrt-kkrt.org/fhir/StructureMap/master-hl7-to-fhir" = "MasterHL7toFHIR"

// Source-Types (Logical Models deiner Segmente)
uses "http://hsrt-kkrt.org/fhir/StructureDefinition/PIDSegment" alias PID as source
uses "http://hsrt-kkrt.org/fhir/StructureDefinition/DG1Segment" alias DG1 as source
uses "http://hsrt-kkrt.org/fhir/StructureDefinition/OBRSegment" alias OBR as source
uses "http://hsrt-kkrt.org/fhir/StructureDefinition/TQ1Segment" alias TQ1 as source
uses "http://hsrt-kkrt.org/fhir/StructureDefinition/ORCSegment" alias ORC as source
uses "http://hl7.org/fhir/StructureDefinition/Parameters" alias PM as source

// Targets
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias B as target
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias P as produced
uses "http://hl7.org/fhir/StructureDefinition/Condition" alias C as produced
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" alias S as produced
uses "http://hl7.org/fhir/StructureDefinition/Provenance" alias PR as produced

// -------------------------------------------
// Hilfsgruppe: Patient aus PID
// -------------------------------------------
group MakePatient(source pid : PID) : P {
  p : P then {
    // stabile URN-Referenz im Bundle
    p.id = uuid();

    // Identifier (PID-3.*)
    p.identifier as id0 then {
      id0.value  = pid.PID_3_id;       // z.B. PID.3.1
      id0.system = pid.PID_3_4_universalId;   // z.B. PID.3.4 (falls vorhanden)
    };

    // Name (PID-5.1/.2)
    p.name as n0 then {
      n0.family = pid.PID_5_1_family;
      n0.given  = pid.PID_5_2_given;
    };

    // Geburtsdatum
    p.birthDate = pid.PID_7;

    // Administrative Gender via ConceptMap; Fallback auf M/F
    p.gender = translate(pid.PID_8_code,
                         'http://hsrt-kkrt.org/fhir/ConceptMap/v2-0001-to-administrative-gender',
                         'code');
    pid.PID_8_code as g where $this = 'M' -> p.gender = 'male';
    pid.PID_8_code as g where $this = 'F' -> p.gender = 'female';
  };
}

// -------------------------------------------
// Hilfsgruppe: Condition aus DG1
// -------------------------------------------
group MakeCondition(source dg1 : DG1, target pat : P) : C {
  c : C then {
    c.id = uuid();

    // subject -> Patient
    c.subject = create('Reference') as r then {
      r.reference = append('urn:uuid:', pat.id);
    };

    // DG1.3 (CWE)
    c.code.coding as cd then {
      cd.code   = dg1.DG1_3_code;    // CWE.1
      cd.display= dg1.DG1_3_text;    // CWE.2
      cd.system = dg1.DG1_3_system;  // CWE.3 (optional)
    };
    
    // Pflichtfelder
    c.status = 'active';
    c.category = create('CodeableConcept') as category then {
      category.coding = create('Coding') as categoryCoding then {
        categoryCoding.system = 'http://terminology.hl7.org/CodeSystem/condition-category';
        categoryCoding.code = 'diagnosis';
        categoryCoding.display = 'Diagnosis';
      }
    };
  };
}

// -------------------------------------------
// Hilfsgruppe: ServiceRequest aus OBR/TQ1/ORC
// -------------------------------------------
group MakeServiceRequest(source obr : OBR, source tq1 : TQ1, source orc : ORC, target pat : P) : S {
  sr : S then {
    sr.id = uuid();

    // subject -> Patient
    sr.subject = create('Reference') as r then {
      r.reference = append('urn:uuid:', pat.id);
    };

    // OBR.4 (CWE) -> code
    sr.code.coding as cd then {
      cd.code   = obr.OBR_4_code;
      cd.display= obr.OBR_4_text;
      cd.system = obr.OBR_4_system;
    };

    // TQ1.7/8 -> occurrenceTiming
    sr.occurrenceTiming = create('Timing') as timing then {
      timing.repeat = create('TimingRepeat') as repeat then {
        repeat.boundsPeriod = create('Period') as bounds then {
          bounds.start = tq1.TQ1_7;
          bounds.end = tq1.TQ1_8;
        }
      }
    };

    // ORC.9 -> authoredOn
    sr.authoredOn = orc.ORC_9;

    // Pflichtfelder mit robusten Defaults:
    // intent  Standard 'plan', ggf. 端ber ORC.1 端berschreiben (hardcoded)
    sr.intent = 'plan';
    orc.ORC_1 as o1 where $this = 'NW' -> sr.intent = 'plan'; // derzeit nur NW->plan vorgesehen

    // status  Standard 'active', ggf. 端ber ORC.5 端berschreiben (hardcoded)
    sr.status = 'active';
    // Beispiel: 'CM'->'completed' (wenn ihr das abbilden wollt)
    orc.ORC_5 as o5 where $this = 'CM' -> sr.status = 'completed';
  };
}

// -------------------------------------------
// Hilfsgruppe: Provenance (Device, RAW HL7, Targets)
// -------------------------------------------
group MakeProvenance(source meta : PM, target pat : P, target cond : C, target sreq : S) : PR {
  pr : PR then {
    pr.id = uuid();
    pr.recorded = now();

    // Targets: Patient, Condition, ServiceRequest
    pr.target = create('Reference') as t1 then { t1.reference = append('urn:uuid:', pat.id); };
    pr.target = create('Reference') as t2 then { t2.reference = append('urn:uuid:', cond.id); };
    pr.target = create('Reference') as t3 then { t3.reference = append('urn:uuid:', sreq.id); };

    // Agent: who = Device (kommt als fullUrl per Parameters)
    pr.agent as ag then {
      ag.type = create('CodeableConcept') as cc then {
        cc.coding = create('Coding') as cg then {
          cg.system = 'http://terminology.hl7.org/CodeSystem/provenance-participant-type';
          cg.code   = 'author';
          cg.display= 'Author';
        };
      };
      // deviceFullUrl als valueUri oder valueString zulassen
      meta.parameter as p where name = 'deviceFullUrl' and valueUri.exists() then
        ag.who = create('Reference') as wr1 then { wr1.reference = p.valueUri; };
      meta.parameter as p where name = 'deviceFullUrl' and valueString.exists() then
        ag.who = create('Reference') as wr2 then { wr2.reference = p.valueString; };
    };

    // RAW HL7 Message als Provenance.entity (role=source), Anzeige im Reference.display
    pr.entity as ent then {
      ent.role = 'source';
      ent.what = create('Reference') as rw then {
        meta.parameter as q where name = 'rawMessage' and valueString.exists() then
          rw.display = q.valueString;
      };
    };
  };
}

// -------------------------------------------
// Hauptgruppe: erzeugt Transaction-Bundle
// -------------------------------------------
group MasterMapping(
  source pid : PID,
  source dg1 : DG1,
  source obr : OBR,
  source tq1 : TQ1,
  source orc : ORC,
  source meta : PM,
  target bundle : B
) {
  bundle.type = 'transaction';
  bundle.timestamp = now();

  // Patient
  p = MakePatient(pid) as pat;
  bundle.entry as e1 then {
    e1.fullUrl = append('urn:uuid:', pat.id);
    e1.resource = pat;
    e1.request = create('BundleEntryRequest') as r1 then {
      r1.method = 'POST';
      r1.url    = 'Patient';
      // Optional: Conditional Create, wenn ihr einen Identifier-Systemwert habt:
      // r1.ifNoneExist = append('identifier=', pat.identifier.first().system, '%7C', pat.identifier.first().value);
    };
  };

  // Condition
  c = MakeCondition(dg1, pat) as cond;
  bundle.entry as e2 then {
    e2.fullUrl = append('urn:uuid:', cond.id);
    e2.resource = cond;
    e2.request = create('BundleEntryRequest') as r2 then {
      r2.method = 'POST';
      r2.url    = 'Condition';
    };
  };

  // ServiceRequest
  s = MakeServiceRequest(obr, tq1, orc, pat) as sreq;
  bundle.entry as e3 then {
    e3.fullUrl = append('urn:uuid:', sreq.id);
    e3.resource = sreq;
    e3.request = create('BundleEntryRequest') as r3 then {
      r3.method = 'POST';
      r3.url    = 'ServiceRequest';
    };
  };

  // Provenance
  pr = MakeProvenance(meta, pat, cond, sreq) as prov;
  bundle.entry as e4 then {
    e4.fullUrl = append('urn:uuid:', prov.id);
    e4.resource = prov;
    e4.request = create('BundleEntryRequest') as r4 then {
      r4.method = 'POST';
      r4.url    = 'Provenance';
    };
  };
}
