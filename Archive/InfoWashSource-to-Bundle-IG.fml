map "http://hsrt-kkrt.org/fhir/StructureMap/InfoWashSource-to-Bundle-IG" = "InfoWashSourceToBundleIG"


// ===================== StructureDefinitions =====================
uses "http://hsrt-kkrt.org/fhir/StructureDefinition/InfoWashSource" alias InfoWashSource as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Condition" alias Condition as produced
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" alias ServiceRequest as produced
uses "http://hl7.org/fhir/StructureDefinition/Provenance" alias Provenance as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/PractitionerRole" alias PractitionerRole as produced
uses "http://hl7.org/fhir/uv/v2mappings/StructureDefinition/TypeInfo" alias TypeInfo as typeInfo
uses "http://hl7.org/fhir/uv/v2mappings/StructureDefinition/RelatedArtifact" alias RelatedArtifact as relatedArtifact

// ===================== ConceptMaps für Datentyp-Transformationen =====================
conceptmap "DatatypeDTMToDateTime" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/DatatypeDTMToDateTime"
conceptmap "DatatypeCWEToCodeableConcept" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/DatatypeCWEToCodeableConcept"
conceptmap "DatatypeXPNToHumanName" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/DatatypeXPNToHumanName"
conceptmap "DatatypeHDToIdentifier" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/DatatypeHDToIdentifier"
conceptmap "DatatypeXTNToContactPoint" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/DatatypeXTNToContactPoint"
conceptmap "DatatypeCQToQuantity" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/DatatypeCQToQuantity"
conceptmap "DatatypeTQToTiming" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/DatatypeTQToTiming"

// ===================== ConceptMaps für Code-Transformationen =====================
conceptmap "TableHL70001ToAdministrativeGender" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/TableHL70001ToAdministrativeGender"
conceptmap "TableHL70002ToV3MaritalStatus" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/TableHL70002ToV3MaritalStatus"
conceptmap "TableHL70004ToEncounterStatus" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/TableHL70004ToEncounterStatus"
conceptmap "TableHL70062ToV3ActReason" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/TableHL70062ToV3ActReason"
conceptmap "TableHL70069ToServiceType" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/TableHL70069ToServiceType"
conceptmap "TableHL70085ToObservationStatus" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/TableHL70085ToObservationStatus"
conceptmap "TableHL70119ToRequestStatus" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/TableHL70119ToRequestStatus"
conceptmap "TableHL70127ToV20127" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/TableHL70127ToV20127"
conceptmap "TableHL70163ToV20163" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/TableHL70163ToV20163"
conceptmap "TableHL70190ToAddressType" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/TableHL70190ToAddressType"
conceptmap "TableHL70200ToNameUse" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/TableHL70200ToNameUse"
conceptmap "TableHL70201ToContactPointSystem" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/TableHL70201ToContactPointSystem"
conceptmap "TableHL70202ToContactPointUse" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/TableHL70202ToContactPointUse"
conceptmap "TableHL70399ToISO31661" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/TableHL70399ToISO31661"

// ===================== ConceptMaps für Segment-Transformationen =====================
conceptmap "SegmentPIDToPatient" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/SegmentPIDToPatient"
conceptmap "SegmentPV1ToEncounter" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/SegmentPV1ToEncounter"
conceptmap "SegmentOBRToServiceRequest" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/SegmentOBRToServiceRequest"
conceptmap "SegmentOBXToObservation" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/SegmentOBXToObservation"
conceptmap "SegmentDG1ToCondition" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/SegmentDG1ToCondition"
conceptmap "SegmentORCToServiceRequest" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/SegmentORCToServiceRequest"
conceptmap "SegmentMSHToMessageHeader" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/SegmentMSHToMessageHeader"
conceptmap "SegmentMSHToProvenance" = "http://hl7.org/fhir/uv/v2mappings/ConceptMap/SegmentMSHToProvenance"

// ===================== Haupt-Transformation =====================
group InfoWashSourceToBundleIG(source source : InfoWashSource, target b : Bundle) {
  // Bundle als Transaction definieren
  b.type = 'transaction' "set-bundle-type";
  
  // ===================== Patient erstellen =====================
  b.entry as ePat, uuid() as uPat then {
    ePat.fullUrl = append('urn:uuid:', uPat) as patRef "set-patient-fullurl";
    ePat.resource = create('Patient') as pat then {
      MakePatientIG(source, pat);
    };
    ePat.request as rq then {
      rq.method = 'POST';
      rq.url = 'Patient';
      rq.ifNoneExist = append('identifier=', source.PID_3_id);
    };
  } "create-patient-entry";

  // ===================== Encounter erstellen =====================
  b.entry as eEnc, uuid() as uEnc then {
    eEnc.fullUrl = append('urn:uuid:', uEnc) as encRef "set-encounter-fullurl";
    eEnc.resource = create('Encounter') as enc then {
      MakeEncounterIG(source, enc, patRef);
    };
    eEnc.request as rq then {
      rq.method = 'POST';
      rq.url = 'Encounter';
    };
  } "create-encounter-entry";

  // ===================== Condition erstellen =====================
  b.entry as eCond, uuid() as uCond then {
    eCond.fullUrl = append('urn:uuid:', uCond) as condRef "set-condition-fullurl";
    eCond.resource = create('Condition') as cond then {
      MakeConditionIG(source, cond, patRef, encRef);
    };
    eCond.request as rq then {
      rq.method = 'POST';
      rq.url = 'Condition';
    };
  } "create-condition-entry";

  // ===================== ServiceRequest erstellen =====================
  b.entry as eSrv, uuid() as uSrv then {
    eSrv.fullUrl = append('urn:uuid:', uSrv) as srvRef "set-servicerequest-fullurl";
    eSrv.resource = create('ServiceRequest') as srv then {
      MakeServiceRequestIG(source, srv, patRef, encRef);
    };
    eSrv.request as rq then {
      rq.method = 'POST';
      rq.url = 'ServiceRequest';
    };
  } "create-servicerequest-entry";

  // ===================== Provenance erstellen =====================
  b.entry as eProv, uuid() as uProv then {
    eProv.fullUrl = append('urn:uuid:', uProv) "set-provenance-fullurl";
    eProv.resource = create('Provenance') as prov then {
      MakeProvenanceIG(source, patRef, encRef, condRef, srvRef, prov);
    };
    eProv.request as rq then {
      rq.method = 'POST';
      rq.url = 'Provenance';
    };
  } "create-provenance-entry";
}

// ===================== Patient-Transformation mit IG-ConceptMaps =====================
group MakePatientIG(source source : InfoWashSource, target p : Patient) {
  // Identifier mit HD-zu-Identifier ConceptMap
  p.identifier as idt then {
    idt.value = source.PID_3_id;
    
    // Assigning Authority (PID-3.4) über ConceptMap
    source.PID_3_4_universalId as au then {
      idt.system = translate(au, '#DatatypeHDToIdentifier') "map-hd-to-identifier";
    } else source.PID_3_6_universalId as fu then {
      idt.system = translate(fu, '#DatatypeHDToIdentifier') "map-hd-to-identifier-fallback";
    };
    
    // Assigning Facility (PID-3.6) als zusätzlicher Identifier
    source.PID_3_6_universalId as fu then {
      p.identifier as idt2 then {
        idt2.value = source.PID_3_id;
        idt2.system = translate(fu, '#DatatypeHDToIdentifier') "map-facility-identifier";
        idt2.type = create('CodeableConcept') as cc then {
          cc.text = 'Facility Identifier';
        };
      };
    };
  };

  // Name über XPN-zu-HumanName ConceptMap
  source.PID_5_1_family as family then {
    p.name as nm then {
      nm.family = family;
      source.PID_5_2_given as given then {
        nm.given as g then g = given;
      };
      // Name Use über ConceptMap
      nm.use = translate(source.PID_5_7, '#TableHL70200ToNameUse') "map-name-use";
    };
  };

  // Geburtsdatum über DTM-zu-DateTime ConceptMap
  source.PID_7 as birthDate then {
    p.birthDate = translate(birthDate, '#DatatypeDTMToDateTime') "map-birthdate";
  };

  // Gender über AdministrativeGender ConceptMap
  source.PID_8_code as genderCode then {
    p.gender = translate(genderCode, '#TableHL70001ToAdministrativeGender') "map-gender";
  } else {
    p.gender = 'unknown' "gender-fallback";
  };

  // Address über SAD-zu-Address ConceptMap
  source.PID_11_1_streetAddress as street then {
    p.address as addr then {
      addr.line as line then line = street;
      addr.city = source.PID_11_3_city;
      addr.state = source.PID_11_4_state;
      addr.postalCode = source.PID_11_5_zipCode;
      addr.country = source.PID_11_6_country;
      addr.type = translate(source.PID_11_7, '#TableHL70190ToAddressType') "map-address-type";
      addr.use = translate(source.PID_11_7, '#TableHL70190ToAddressUse') "map-address-use";
    };
  };

  // Telefon über XTN-zu-ContactPoint ConceptMap
  source.PID_13_1_telephoneNumber as phone then {
    p.telecom as tel then {
      tel.value = phone;
      tel.system = 'phone';
      tel.use = translate(source.PID_13_2_telephoneUseCode, '#TableHL70201ToContactPointSystem') "map-phone-use";
    };
  };

  // Marital Status über ConceptMap
  source.PID_16_code as maritalCode then {
    p.maritalStatus = create('CodeableConcept') as cc then {
      cc.coding as cd then {
        cd.code = translate(maritalCode, '#TableHL70002ToV3MaritalStatus') "map-marital-status";
      };
    };
  };
}

// ===================== Encounter-Transformation mit IG-ConceptMaps =====================
group MakeEncounterIG(source source : InfoWashSource, target e : Encounter, source patRef : string) {
  // Subject (Patient)
  e.subject as subj then {
    subj.reference = patRef;
  };

  // Status über ConceptMap
  source.PV1_2_patientClass as patientClass then {
    e.status = translate(patientClass, '#TableHL70004ToEncounterStatus') "map-encounter-status";
  };

  // Class über ConceptMap
  e.class = create('Coding') as c then {
    c.system = 'http://terminology.hl7.org/CodeSystem/v3-ActCode';
    c.code = translate(source.PV1_2_patientClass, '#TableHL70004ToV3ActCode') "map-encounter-class";
  };

  // Period
  e.period = create('Period') as p then {
    p.start = translate(source.PV1_44_admitDateTime, '#DatatypeDTMToDateTime') "map-admit-datetime";
    p.end = translate(source.PV1_45_dischargeDateTime, '#DatatypeDTMToDateTime') "map-discharge-datetime";
  };

  // Service Type über ConceptMap
  source.PV1_10_hospitalService as serviceType then {
    e.serviceType = create('CodeableConcept') as cc then {
      cc.coding as cd then {
        cd.code = translate(serviceType, '#TableHL70069ToServiceType') "map-service-type";
      };
    };
  };

  // Reason Code über ConceptMap
  source.PV1_3_admissionType as admissionType then {
    e.reasonCode as rc then {
      rc.coding as cd then {
        cd.code = translate(admissionType, '#TableHL70062ToV3ActReason') "map-admission-reason";
      };
    };
  };
}

// ===================== Condition-Transformation mit IG-ConceptMaps =====================
group MakeConditionIG(source source : InfoWashSource, target c : Condition, source patRef : string, source encRef : string) {
  // Subject (Patient)
  c.subject as subj then {
    subj.reference = patRef;
  };

  // Encounter
  c.encounter as enc then {
    enc.reference = encRef;
  };

  // Code über CWE-zu-CodeableConcept ConceptMap
  source.DG1_3_code as diagnosisCode then {
    c.code = create('CodeableConcept') as cc then {
      cc.text = source.DG1_3_text;
      cc.coding as cd then {
        cd.code = diagnosisCode;
        cd.system = translate(source.DG1_3_system, '#DatatypeHDToIdentifier') "map-diagnosis-system";
      };
    };
  };

  // Severity über ConceptMap
  source.DG1_5_severityCode as severityCode then {
    c.severity = create('CodeableConcept') as cc then {
      cc.coding as cd then {
        cd.code = translate(severityCode, '#TableHL70127ToV20127') "map-severity";
      };
    };
  };

  // Category über ConceptMap
  c.category = create('CodeableConcept') as cc then {
    cc.coding as cd then {
      cd.system = 'http://terminology.hl7.org/CodeSystem/condition-category';
      cd.code = 'encounter-diagnosis';
    };
  };

  // Clinical Status
  c.clinicalStatus = create('CodeableConcept') as cc then {
    cc.coding as cd then {
      cd.system = 'http://terminology.hl7.org/CodeSystem/condition-clinical';
      cd.code = 'active';
    };
  };

  // Onset über DTM-zu-DateTime ConceptMap
  source.DG1_6_onsetDate as onsetDate then {
    c.onsetDateTime = translate(onsetDate, '#DatatypeDTMToDateTime') "map-onset-datetime";
  };
}

// ===================== ServiceRequest-Transformation mit IG-ConceptMaps =====================
group MakeServiceRequestIG(source source : InfoWashSource, target r : ServiceRequest, source patRef : string, source encRef : string) {
  // Subject (Patient)
  r.subject as subj then {
    subj.reference = patRef;
  };

  // Encounter
  r.encounter as enc then {
    enc.reference = encRef;
  };

  // Intent über ORC-1 ConceptMap
  source.ORC_1 as orderControl then {
    r.intent = translate(orderControl, '#TableHL70119ToRequestStatus') "map-intent";
  } else {
    r.intent = 'plan' "intent-fallback";
  };

  // Status über ORC-5 ConceptMap
  source.ORC_5 as orderStatus then {
    r.status = translate(orderStatus, '#TableHL70119ToRequestStatus') "map-status";
  } else {
    r.status = 'active' "status-fallback";
  };

  // Code über CWE-zu-CodeableConcept ConceptMap
  source.OBR_4_code as procedureCode then {
    r.code = create('CodeableConcept') as cc then {
      cc.text = source.OBR_4_text;
      cc.coding as cd then {
        cd.code = procedureCode;
        cd.system = translate(source.OBR_4_system, '#DatatypeHDToIdentifier') "map-procedure-system";
      };
    };
  };

  // Priority über ConceptMap
  source.OBR_5_priority as priority then {
    r.priority = translate(priority, '#TableHL70217ToV3ActPriority') "map-priority";
  };

  // Quantity über CQ-zu-Quantity ConceptMap
  source.OBR_27_quantityTiming as quantity then {
    r.quantityQuantity = translate(quantity, '#DatatypeCQToQuantity') "map-quantity";
  };

  // Timing über TQ-zu-Timing ConceptMap
  source.TQ1_7_startDateTime as startTime then {
    r.occurrenceTiming = create('Timing') as t then {
      t.repeat = create('TimingRepeat') as rep then {
        rep.boundsPeriod = create('Period') as bp then {
          bp.start = translate(startTime, '#DatatypeDTMToDateTime') "map-start-datetime";
          source.TQ1_8_endDateTime as endTime then {
            bp.end = translate(endTime, '#DatatypeDTMToDateTime') "map-end-datetime";
          };
        };
      };
    };
  };

  // Authored On über DTM-zu-DateTime ConceptMap
  source.ORC_9_dateTimeOfTransaction as authoredOn then {
    r.authoredOn = translate(authoredOn, '#DatatypeDTMToDateTime') "map-authored-datetime";
  };

  // Requester über ConceptMap
  source.ORC_12_orderingProvider as orderingProvider then {
    r.requester = create('Reference') as req then {
      req.reference = translate(orderingProvider, '#DatatypeXCNToPractitioner') "map-ordering-provider";
    };
  };
}

// ===================== Provenance-Transformation mit IG-ConceptMaps =====================
group MakeProvenanceIG(
  source source : InfoWashSource,
  source patRef : string,
  source encRef : string,
  source condRef : string,
  source srvRef : string,
  target p : Provenance
) {
  // Recorded Time
  p.recorded = now();

  // Agent (Device)
  p.agent as ag then {
    ag.type = create('CodeableConcept') as cc then {
      cc.coding as c then {
        c.system = 'http://terminology.hl7.org/CodeSystem/provenance-participant-type';
        c.code = 'assembler';
      };
    };
    ag.who = create('Reference') as w then {
      w.reference = source.DEVICE_fullUrl;
    };
  };

  // Activity über ConceptMap
  p.activity = create('CodeableConcept') as cc then {
    cc.coding as c then {
      c.system = 'http://terminology.hl7.org/CodeSystem/v3-DataOperation';
      c.code = 'CREATE';
    };
  };

  // Entity (Source Message)
  p.entity as ent then {
    ent.role = 'source';
    ent.what = create('Reference') as wh then {
      wh.display = source.RAW_message;
    };
  };

  // Targets (alle erstellten Ressourcen)
  p.target as tp then { tp.reference = patRef; };
  p.target as te then { te.reference = encRef; };
  p.target as tc then { tc.reference = condRef; };
  p.target as ts then { ts.reference = srvRef; };

  // Location über ConceptMap
  source.PV1_3_pointOfCare as pointOfCare then {
    p.location = create('Reference') as loc then {
      loc.reference = translate(pointOfCare, '#DatatypeHDToLocation') "map-location";
    };
  };
}
