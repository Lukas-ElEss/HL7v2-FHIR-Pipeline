map "http://hsrt-kkrt.org/fhir/StructureMap/InfoWashSource-to-Bundle" = "IWS2Bundle"

uses "http://hsrt-kkrt.org/fhir/StructureDefinition/InfoWashSource" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

// Submaps importieren (Namen/URLs ggf. anpassen)
imports "http://hsrt-kkrt.org/fhir/StructureMap/PID-to-Patient"
imports "http://hsrt-kkrt.org/fhir/StructureMap/DG1-to-Condition"
imports "http://hsrt-kkrt.org/fhir/StructureMap/ORC-to-ServiceRequest"
imports "http://hsrt-kkrt.org/fhir/StructureMap/OBR-to-ServiceRequest"
imports "http://hsrt-kkrt.org/fhir/StructureMap/TQ1-to-ServiceRequest"

group IWS2Bundle(source src : InfoWashSource, target bundle : Bundle) {
  
  src as s -> 

    // Bundle Typ
    bundle.type = 'transaction' "bundle_type";

    // UUIDs for cross references
    patId = uuid(),
    condId = uuid(),
    sereId = uuid(),
    provId = uuid(),

    // -------------------------
    // Patient (mit temporÃ¤rer URN)
    // -------------------------
    src.PID as pid ->
      bundle.entry = create('Bundle.entry') as ePat,
      ePat.fullUrl = append('urn:uuid:', patId) as patRef,
      ePat.resource = create('Patient') as pat
        then PIDtoPatient(pid, pat),
      ePat.request = create('Bundle.entry.request') as preq,
      preq.method = 'POST', preq.url = 'Patient'
    "entry_patient";

    // -------------------------
    // Condition (-> Patient)
    // -------------------------
    src.DG1 as dg1 ->
      bundle.entry = create('Bundle.entry') as eCond,
      eCond.fullUrl = append('urn:uuid:', condId) as condRef,
      eCond.resource = create('Condition') as cond
        then DG1toCondition(dg1, cond),
      cond.subject = create('Reference') as csub,
      csub.reference = patRef,
      eCond.request = create('Bundle.entry.request') as creq,
      creq.method = 'POST', creq.url = 'Condition'
    "entry_condition";

    // -------------------------
    // ServiceRequest (-> Patient; reasonReference -> Condition)
    // -------------------------
    src.ORC as orc, src.OBR as obr, src.TQ1 as tq1 ->
      bundle.entry = create('Bundle.entry') as eSR,
      eSR.fullUrl = append('urn:uuid:', sereId) as srRef,
      eSR.resource = create('ServiceRequest') as sr
        then ORCtoServiceRequest(orc, sr)
        then OBRtoServiceRequest(obr, sr)
        then TQ1toServiceRequest(tq1, sr),
      sr.subject = create('Reference') as ssub,
      ssub.reference = patRef,
      sr.reasonReference = create('Reference') as rref,
      rref.reference = condRef,
      eSR.request = create('Bundle.entry.request') as sreq,
      sreq.method = 'POST', sreq.url = 'ServiceRequest'
    "entry_servicerequest";

    // -------------------------
    // Provenance (Targets: Pat/Cond/SR; Agent.who -> Device)
    // -------------------------
    src ->
      bundle.entry = create('Bundle.entry') as eProv,
      eProv.fullUrl = append('urn:uuid:', provId) as provRef,
      eProv.resource = create('Provenance') as prov,

      // Targets
      prov.target = create('Reference') as tr1, tr1.reference = patRef,
      prov.target = create('Reference') as tr2, tr2.reference = condRef,
      prov.target = create('Reference') as tr3, tr3.reference = srRef,

      // Agent.who als direkte Resource-Referenz auf ein bereits vorhandenes Device
      // (CTX_DEVICE_id: absolute oder relative FHIR-URL, z. B. "Device/v2-to-fhir-pipeline")
      src.CTX_DEVICE_id as devUrl ->
        prov.agent = create('Provenance.agent') as ag,
        ag.who = create('Reference') as whoRef,
        whoRef.reference = devUrl,

      // Entity: Rolle + Rohnachricht als what.display
      src.CTX_role as role, src.CTX_RAW_message as raw ->
        prov.entity = create('Provenance.entity') as ent,
        ent.role = role,
        ent.what = create('Reference') as whatRef,
        whatRef.display = raw,

      eProv.request = create('Bundle.entry.request') as pvreq,
      pvreq.method = 'POST', pvreq.url = 'Provenance'
    "entry_provenance"
  "MakeBundle";
}
