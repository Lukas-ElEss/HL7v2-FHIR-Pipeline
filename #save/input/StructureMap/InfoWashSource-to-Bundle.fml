map "http://hsrt-kkrt.org/fhir/StructureMap/InfoWashSource-to-Bundle" = "InfoWashSourceToBundle"

uses "http://hsrt-kkrt.org/fhir/StructureDefinition/InfoWashSource" alias InfoWashSource as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target

imports "http://hsrt-kkrt.org/fhir/StructureMap/pid-to-patient"
imports "http://hsrt-kkrt.org/fhir/StructureMap/dg1-to-condition"
imports "http://hsrt-kkrt.org/fhir/StructureMap/obr-to-servicerequest"
imports "http://hsrt-kkrt.org/fhir/StructureMap/orc-to-servicerequest"
imports "http://hsrt-kkrt.org/fhir/StructureMap/tq1-to-servicerequest"

group main(source src : InfoWashSource, target bundle : Bundle) {
  src ->
    // bundle type
    bundle.type = 'transaction',

    // UUIDs for cross references
    uuid() as pid,
    uuid() as cid,
    uuid() as srid,
    uuid() as pvid,

    // ---------------- Patient ----------------
    bundle.entry as e1,
    e1.fullUrl = append('urn:uuid:', pid),
    e1.resource = create('Patient') as pat,
    pat.id = pid,
    e1.request = create('BackboneElement') as r1,
    r1.method = 'POST',
    r1.url = 'Patient',

    // ---------------- Condition ----------------
    bundle.entry as e2,
    e2.fullUrl = append('urn:uuid:', cid),
    e2.resource = create('Condition') as cond,
    cond.id = cid,
    cond.subject = create('Reference') as csub,
    csub.reference = append('urn:uuid:', pid),
    e2.request = create('BackboneElement') as r2,
    r2.method = 'POST',
    r2.url = 'Condition',

    // ---------------- ServiceRequest ----------------
    bundle.entry as e3,
    e3.fullUrl = append('urn:uuid:', srid),
    e3.resource = create('ServiceRequest') as sr,
    sr.id = srid,
    sr.subject = create('Reference') as ssub,
    ssub.reference = append('urn:uuid:', pid),
    sr.reasonReference = create('Reference') as srr,
    srr.reference = append('urn:uuid:', cid),
    e3.request = create('BackboneElement') as r3,
    r3.method = 'POST',
    r3.url = 'ServiceRequest',

    // ---------------- Provenance ----------------
    bundle.entry as e4,
    e4.fullUrl = append('urn:uuid:', pvid),
    e4.resource = create('Provenance') as prov,
    prov.id = pvid,
    // targets
    prov.target = create('Reference') as pt1, pt1.reference = append('urn:uuid:', pid),
    prov.target = create('Reference') as pt2, pt2.reference = append('urn:uuid:', cid),
    prov.target = create('Reference') as pt3, pt3.reference = append('urn:uuid:', srid),
    // agent.who (Device reference from source)  <<- bind first, then use
    prov.agent as ag, ag.who = create('Reference') as who,
    evaluate(src, 'DEVICE_id') as devRef,          // bind source prop
    who.reference = devRef,                              // assign variable
    // entity: source and raw message (Reference.display)
    prov.entity as ent, ent.role = 'source',
    ent.what = create('Reference') as whatRef,
    evaluate(src, 'RAW_message') as rawTxt,              // bind raw message
    whatRef.display = rawTxt,
    e4.request = create('BackboneElement') as r4, r4.method = 'POST', r4.url = 'Provenance'

    // ---- call imported segment maps at the end (no trailing comma) ----
    then PIDToPatient(src, pat),
         DG1ToCondition(src, cond),
         OBRToServiceRequest(src, sr),
         ORCToServiceRequest(src, sr),
         TQ1ToServiceRequest(src, sr)
  "MakeBundle";
}
